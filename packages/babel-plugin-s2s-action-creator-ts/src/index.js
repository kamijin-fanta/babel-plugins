import syntaxTypeScript from '@babel/plugin-syntax-typescript';
import path from 'path';
import * as types from '@babel/types';
import camelCase from 'lodash.camelcase';

// ///// plugin

export default (babel) => {
  return {
    inherits: syntaxTypeScript,
    name: 'babel-plugin-s2s-action-creator-ts',
    visitor: {
      Program: {
        exit(programPath, state) {
          const {file} = state;
          const filename = file.opts.filename;
          const basename = path.basename(filename, path.extname(filename));

          const existInterface = new Map();
          const imports = [];

          programPath.traverse({
            ImportDeclaration(path) {
              imports.push(path.node);
            },
            TSInterfaceDeclaration(path) {
              existInterface.set(path.node.id.name, path.node.body.body);
            },
          });


          const functionsAst = Array.from(existInterface).map(([key, fileds]) => {
            let ignoreTypeFileds = fileds
              .filter((f) => f.key.name !== 'type');

            let fnc = types.FunctionDeclaration( // export function FUGA
              types.Identifier(camelCase(key)), // function name
              ignoreTypeFileds.map((f) => { // args
                let id = types.Identifier(f.key.name);
                id.typeAnnotation = f.typeAnnotation;
                return id;
              }),
              types.BlockStatement([ // statements
                types.ReturnStatement(
                  types.ObjectExpression([ // fileds
                    types.ObjectProperty(
                      types.Identifier('type'),
                      types.MemberExpression(types.Identifier('Actions'), types.Identifier(key)),
                    ),
                    ...ignoreTypeFileds.map((f) => {
                      let obj = types.ObjectProperty(
                        f.key,
                        types.Identifier(f.key.name)
                      );
                      obj.shorthand = true;
                      return obj;
                    }),
                  ])
                ),
              ]),
            );
            fnc.returnType = types.TSTypeAnnotation(
              types.TSTypeReference(types.Identifier(key))
            );
            return types.ExportNamedDeclaration(fnc, []);
          });

          const importSpecs = [['Actions'], ...Array.from(existInterface)].map(([key, fileds]) => {
            const id = types.Identifier(key);
            return types.ImportSpecifier(id, id);
          });
          const actionImports = types.ImportDeclaration(
            importSpecs,
            types.StringLiteral(`./${basename}`),
          );

          // generate node tree
          programPath.node.body = [
            ...imports,
            actionImports,
            ...functionsAst,
          ];

          programPath.node.body[0].leadingComments = [
            {
              type: 'CommentBlock',
              value: '**** Do not edit this file ****',
            },
          ];
        },
      },
    },
  };
};
