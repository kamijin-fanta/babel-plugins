import syntaxTypeScript from '@babel/plugin-syntax-typescript';
import * as types from '@babel/types';
import template from '@babel/template';
import globby from 'globby';
import upperCamelCase from 'uppercamelcase';
import {getParentDirName} from 's2s-utils';
import path from 'path';
import normalizePathSeq from 'normalize-path-sep';
import slash from 'slash';

const babylonOpts = {sourceType: 'module', plugins: ['typescript']};
const wrapTemp = (tmpl) => template(tmpl, babylonOpts);

export function getImportPath(from, to) {
  const relative = slash(path.relative(
    path.dirname(normalizePathSeq(from)), normalizePathSeq(to)
  ));
  const formatted = relative.replace(/\.\w+$/, '');
  if (!/^\.\.?/.test(formatted)) {
    return `./${formatted}`;
  }
  return formatted;
}

// ///// templates

const builders = {
  imports: wrapTemp(`import { IMPORT as ALIAS } from "FILE";`),
  comments: () => ({
    type: 'CommentBlock',
    value: '**** Do not edit this file ****',
  }),
};

function createImportName(filename, prefix, suffix) {
  return prefix + upperCamelCase(getParentDirName(filename)) + suffix;
}

function genExport(importPathList, exportType, exportName) {
  switch (exportType) {
    case 'union':
    default:
      return types.ExportNamedDeclaration(
        types.TSTypeAliasDeclaration(
          types.Identifier(exportName),
          undefined,
          types.TSUnionType(
            importPathList.map(([_, action]) => types.TSTypeReference(types.Identifier(action)))
          )
        ),
        [],
      );
    case 'array':
      return types.ExportNamedDeclaration(
        types.VariableDeclaration(
          'const',
          [types.VariableDeclarator(
            types.Identifier(exportName),
            types.ArrayExpression(
              importPathList.map(([_, action]) => types.Identifier(action))
            ),
          )],
        ),
        [],
      );
    case 'object':
      return types.ExportNamedDeclaration(
        types.VariableDeclaration(
          'const',
          [types.VariableDeclarator(
            types.Identifier(exportName),
            types.ObjectExpression(
              importPathList.map(([_, action]) => {
                let obj = types.ObjectProperty(
                  types.Identifier(action),
                  types.Identifier(action)
                );
                obj.shorthand = true;
                return obj;
              })
            ),
          )],
        ),
        [],
      );
  }
}

export default (babel) => {
  return {
    inherits: syntaxTypeScript,
    name: 'babel-plugin-s2s-some-root-ts',
    visitor: {
      Program: {
        exit(programPath, state) {
          const {opts: {
            input,
            output,
            prefix = '',
            suffix = '',
            importName,
            exportName = 'Root',
            exportType = 'union', // union|array|object
          }} = state;
          const globOptions = Object.assign(
            {absolute: true},
            state.opts.globOptions,
          );

          if (!input) {
            throw new Error('require input option');
          }
          if (!output) {
            throw new Error('require output option');
          }

          const files = globby.sync(input, globOptions);
          const importPathList = files.map((f) => {
            const path = getImportPath(output, f);
            return [
              path,
              createImportName(path, prefix, suffix),
            ];
          });

          const imports = importPathList.map(([path, key]) =>
            builders.imports({
              IMPORT: types.Identifier(importName ? importName : key),
              ALIAS: types.Identifier(key),
              FILE: types.StringLiteral(path),
            })
          );

          const exportAst = genExport(importPathList, exportType, exportName);


          programPath.node.body = [
            ...imports,
            types.Noop(),
            exportAst,
          ];

          // add 'do not edit' comment
          programPath.node.body[0].leadingComments = [
            builders.comments(),
          ];
        },
      },
    },
  };
};
